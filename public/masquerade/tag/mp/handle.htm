<never>
  通用事件处理器, 必须放在发出消息的节点中作为子节点, 处理父节点发来的消息, 
  父节点必须有属性: `data-event-type`, 自定义脚本从 4 个地方来:
    1. 用 handle 的 src 属性从 url 加载一个脚本.
    2. 用 script 子标签的 src 属性加载一个脚本.
    3. 从 script 子标签中获取代码 (不推荐).
    4. 从 handle 的标签体中获取代码 (不推荐).
    
  函数模板: (function(data, type, id, handle) { })
    data   : 接收发来的数据.
    type   : 消息类型
    id     : 消息 id
    handle : 标签本身的 jquery 对象
    
  参数: 
    [可选] src: 加载脚本的 url
</never>
<code style='display: none' class='auto_tag_mp_handle' src='###src###'><pit/></code>
<once id='auto_tag_mp_handle'>
<js:xboson/>
<script>
  $('.auto_tag_mp_handle').each(function() {
    var thiz = $(this);
    var sc   = thiz.find('script');
    var pte  = thiz.parents("[data-event-type]").first();
    var type = pte.data('event-type');
    var pid  = pte.attr("id");
    if (!type) {
      zy.ui.msg("错误 &lt;mp:handle>", "父标签中没有找到发送消息节点", 'e');
      return;
    }
    
    if (thiz.attr("src")) {
      var src = thiz.attr('src');
      xb.getText(src, function(err, code) {
        if (err) return zy.ui.msg("错误 &lt;mp:handle>", err.stack, 'e');
        setHandleWithCode(code);
      });
      return;
    }
    
    if (sc.length) {
      var src = sc.attr('src');
      if (src) {
        xb.getText(src, function(err, code) {
          if (err) return zy.ui.msg("错误 &lt;mp:handle>", err.stack, 'e');
          setHandleWithCode(code);
        });
      } else {
        setHandleWithCode(sc.html());
      }
    } else {
      setHandleWithCode(thiz.html());
    }
    
    function setHandleWithCode(code) {
      xb.regListenerWithCode(code, type, pid, thiz);
    }
  }).remove();
</script>
</once>